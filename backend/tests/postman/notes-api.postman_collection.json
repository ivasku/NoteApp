{
  "info": {
    "name": "Notes API Tests",
    "description": "Complete API testing for Notes application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000/api"
    },
    {
      "key": "authToken",
      "value": ""
    },
    {
      "key": "noteId",
      "value": ""
    },
    {
      "key": "testEmail",
      "value": "test@example.com"
    },
    {
      "key": "testPassword",
      "value": "password123"
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "Register User - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('user');",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "});",
                  "",
                  "pm.test('Token is set', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('authToken', jsonData.data.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser{{$timestamp}}\",\n  \"email\": \"test{{$timestamp}}@example.com\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register User - Invalid Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});",
                  "",
                  "pm.test('Error message about email', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"email\": \"invalid-email\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Register User - Missing Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});",
                  "",
                  "pm.test('Error message about required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('provide');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          }
        },
        {
          "name": "Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('token');",
                  "    pm.environment.set('authToken', jsonData.data.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{testEmail}}\",\n  \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});",
                  "",
                  "pm.test('Error message about credentials', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('invalid');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"wrong@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "Notes CRUD Tests",
      "item": [
        {
          "name": "Get All Notes - Empty List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Notes array is empty initially', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.notes).to.be.an('array');",
                  "    pm.expect(jsonData.data.notes).to.have.lengthOf(0);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notes",
              "host": ["{{baseUrl}}"],
              "path": ["notes"]
            }
          }
        },
        {
          "name": "Create Note - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has success true', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "});",
                  "",
                  "pm.test('Note is created with correct data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.note).to.have.property('_id');",
                  "    pm.expect(jsonData.data.note.title).to.eql('Test Note');",
                  "    pm.expect(jsonData.data.note.content).to.eql('This is a test note');",
                  "    pm.environment.set('noteId', jsonData.data.note._id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Test Note\",\n  \"content\": \"This is a test note\",\n  \"category\": \"Testing\",\n  \"isImportant\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/notes",
              "host": ["{{baseUrl}}"],
              "path": ["notes"]
            }
          }
        },
        {
          "name": "Create Note - Missing Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});",
                  "",
                  "pm.test('Error message about required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('required');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Note without title\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/notes",
              "host": ["{{baseUrl}}"],
              "path": ["notes"]
            }
          }
        },
        {
          "name": "Create Note - Unauthorized",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});",
                  "",
                  "pm.test('Error message about authorization', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('authorization');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Unauthorized Note\",\n  \"content\": \"This should fail\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/notes",
              "host": ["{{baseUrl}}"],
              "path": ["notes"]
            }
          }
        },
        {
          "name": "Get All Notes - With Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains notes', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.notes).to.be.an('array');",
                  "    pm.expect(jsonData.data.notes.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Pagination data is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data).to.have.property('pagination');",
                  "    pm.expect(jsonData.data.pagination).to.have.property('total');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notes",
              "host": ["{{baseUrl}}"],
              "path": ["notes"]
            }
          }
        },
        {
          "name": "Get Single Note - Valid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains note data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.note).to.have.property('_id');",
                  "    pm.expect(jsonData.data.note).to.have.property('title');",
                  "    pm.expect(jsonData.data.note).to.have.property('content');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notes/{{noteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["notes", "{{noteId}}"]
            }
          }
        },
        {
          "name": "Update Note - Valid Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Note is updated correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.note.title).to.eql('Updated Test Note');",
                  "    pm.expect(jsonData.data.note.content).to.eql('This note has been updated');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Test Note\",\n  \"content\": \"This note has been updated\",\n  \"isImportant\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/notes/{{noteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["notes", "{{noteId}}"]
            }
          }
        },
        {
          "name": "Update Note - Invalid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Note\",\n  \"content\": \"This should fail\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/notes/invalid-id-123",
              "host": ["{{baseUrl}}"],
              "path": ["notes", "invalid-id-123"]
            }
          }
        },
        {
          "name": "Delete Note - Valid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Success message returned', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(true);",
                  "    pm.expect(jsonData.message.toLowerCase()).to.include('deleted');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notes/{{noteId}}",
              "host": ["{{baseUrl}}"],
              "path": ["notes", "{{noteId}}"]
            }
          }
        },
        {
          "name": "Delete Note - Invalid ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 or 404', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([400, 404]);",
                  "});",
                  "",
                  "pm.test('Response has success false', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.eql(false);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/notes/invalid-id-456",
              "host": ["{{baseUrl}}"],
              "path": ["notes", "invalid-id-456"]
            }
          }
        }
      ]
    }
  ]
}